type OnRecordRowData = {
    row: number;
    data: {
        [columnName: string]: {
            value: string | number;
            isValid: boolean;
        };
    };
};
type OnRecordRowResponse = {
    row: number;
    data: {
        [columnName: string]: Array<{
            message: string;
            level: "error" | "info" | "healing";
        }>;
    };
};
export type onDataResponseWithoutBatching = Promise<{
    errors?: {
        row: Record<string, string | number | undefined>;
        error: string;
    }[];
    successes?: Record<string, string | number | undefined>[];
} | void>;
export type onDataResponseWithBatching = Promise<{
    errors?: {
        row: number;
        error: string;
    }[];
    successes?: Record<string, string | number | undefined>[];
} | void>;
export type onRecordsInitialType = ({ uploadId, fileName, importerId, batch, user, metadata, rows, }: {
    uploadId: string;
    fileName: string;
    importerId: string;
    batch: {
        index: number;
        count: number;
        totalRows: number;
    };
    user?: Record<string, string | number> | null;
    metadata?: Record<string, string | number> | null;
    rows: OnRecordRowData[];
}) => Promise<OnRecordRowResponse[] | void> | OnRecordRowResponse[] | void;
export type onRecordEditType = ({ uploadId, fileName, importerId, user, metadata, row, }: {
    uploadId: string;
    fileName: string;
    importerId: string;
    user?: Record<string, string | number> | null;
    metadata?: Record<string, string | number> | null;
    row: OnRecordRowData;
}) => Promise<OnRecordRowResponse | void> | OnRecordRowResponse | void;
export type CsvData = {
    uploadId: number;
    fileName: string;
    rows: Record<string, string | number>[];
    user?: Record<string, string | number>;
    metadata?: Record<string, string | number>;
    matchedColumnsMap?: Record<string, string | number>;
    batch?: {
        index: number;
        count: number;
        totalRows: number;
    };
};
export type ThemeType = {
    global: {
        backgroundColor: string;
        primaryTextColor: string;
        secondaryTextColor: string;
        successColor: string;
        warningColor: string;
    };
    buttons: {
        primary: {
            backgroundColor: string;
            color: string;
            border: string;
            borderRadius: string;
            boxShadow: string;
            ":hover": {
                backgroundColor: string;
                color: string;
            };
        };
        secondary: {
            backgroundColor: string;
            color: string;
            border: string;
            borderRadius: string;
            boxShadow: string;
            ":hover": {
                backgroundColor: string;
                color: string;
            };
        };
    };
};
type DateFormatsType = "DD/MM/YYYY" | "DD/MM/YY" | "DD-MM-YYYY" | "DD-MM-YY" | "DD.MM.YYYY" | "DD.MM.YY" | "MM/DD/YYYY" | "MM/DD/YY" | "MM-DD-YYYY" | "MM-DD-YY" | "MM.DD.YYYY" | "MM.DD.YY" | "YYYY-MM-DD" | "DATEVALUE";
export type DynamicColumnsType = Array<{
    name: string;
    description?: string | null | undefined;
    example?: string | null | undefined;
    mustBeMatched?: boolean | null | undefined;
    valueCannotBeBlank?: boolean | null | undefined;
    validationHook?: boolean | null | undefined;
    validationFormat: {
        type: "string";
    } | {
        type: "number";
    } | {
        type: "date";
        format: DateFormatsType;
    } | {
        type: "phone";
    } | {
        type: "email";
        format?: "allowDisplayName" | null;
    } | {
        type: "regex";
        format: string;
    };
    customValidationErrorMessage?: string | null | undefined;
}>;
export {};
//# sourceMappingURL=types.d.ts.map